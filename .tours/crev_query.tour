{
    "title": "crev_query",
    "steps": [{
            "file": "src/main.rs",
            "line": 266,
            "description": "## server route  \nThe web server recognizes the route /query/ and calls html_for_crev_query().",
            "selection": {
                "start": {
                    "line": 263,
                    "character": 9
                },
                "end": {
                    "line": 264,
                    "character": 92
                }
            }
        },
        {
            "file": "src/crev_query_mod.rs",
            "line": 32,
            "description": "## data model  \nPrepare CrevQueryData. This is the data model with all the data for templating in one place.",
            "selection": {
                "start": {
                    "line": 25,
                    "character": 4
                },
                "end": {
                    "line": 31,
                    "character": 7
                }
            }
        },
        {
            "file": "src/crev_query_mod.rs",
            "line": 37,
            "description": "## template on disk  \nRead the template from the disk and start the rendering.",
            "selection": {
                "start": {
                    "line": 36,
                    "character": 1
                },
                "end": {
                    "line": 37,
                    "character": 73
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 77,
            "description": "## render_template_raw_to_nodes  \nThis default trait method for rendering has no special knowledge about the data. Only about html templates. The templateing works with Nodes.",
            "selection": {
                "start": {
                    "line": 73,
                    "character": 8
                },
                "end": {
                    "line": 73,
                    "character": 33
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 66,
            "description": "## must implement methods\nIn the same trait we have specific functions that must be implemented for every data model separately.",
            "selection": {
                "start": {
                    "line": 58,
                    "character": 5
                },
                "end": {
                    "line": 66,
                    "character": 20
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 81,
            "description": "## extract children subtemplates  \nThe template can contain sub-templates. Here extract only the children (depth level 1).\nThe parent template is drained from subtemplates. Only a placeholder is retained for later replacement.",
            "selection": {
                "start": {
                    "line": 79,
                    "character": 1
                },
                "end": {
                    "line": 81,
                    "character": 70
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 153,
            "description": "## read template events\nThe reader_for_microxml moves event by event sequentialy. For different types of events there is different code. Here we transform the input String into a Vec<Node> for easy manipulation.",
            "selection": {
                "start": {
                    "line": 148,
                    "character": 1
                },
                "end": {
                    "line": 153,
                    "character": 49
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 160,
            "description": "## new node\nA new html node/element/tag. We create a new Node with only the basic data.",
            "selection": {
                "start": {
                    "line": 155,
                    "character": 16
                },
                "end": {
                    "line": 160,
                    "character": 19
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 169,
            "description": "## Svg namespace\nSvg inside Html must be specially adorned with a namespace. Very annoying.",
            "selection": {
                "start": {
                    "line": 161,
                    "character": 20
                },
                "end": {
                    "line": 169,
                    "character": 22
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 181,
            "description": "## fill node recursively\nThe new node we created will be filled in this method. This goes recursive.",
            "selection": {
                "start": {
                    "line": 175,
                    "character": 1
                },
                "end": {
                    "line": 181,
                    "character": 20
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 141,
            "description": "## fill_element_node()  \nThis is the recursive method. It accepts a newly created ElementNode and fills it with attributes and children. Most of the template is just copied. Special Comments and data- attributes are points in the template to replace with dynamic content.",
            "selection": {
                "start": {
                    "line": 134,
                    "character": 1
                },
                "end": {
                    "line": 141,
                    "character": 39
                }
            }
        },
        {
            "file": "web_server_folder/templates/query/crev_query_template.html",
            "line": 28,
            "description": "## static html template\nThe template's life starts as static content. The graphic designer can copy the html file to his disk and open it with the browser. He can use a text editor to change html and css design. The template contains static sample data similar to the dynamic data. So the designer has the visual clue how all will look at the end.",
            "selection": {
                "start": {
                    "line": 23,
                    "character": 1
                },
                "end": {
                    "line": 28,
                    "character": 80
                }
            }
        },
        {
            "file": "web_server_folder/templates/query/crev_query_template.html",
            "line": 42,
            "description": "## dynamic content\nModifying the visuals of a web page is an eternal task. Let's separate as much as possible the work of the graphic designer and of the (data) developer.\nOnce the graphic design is ready, we need to add placeholders for dynamic data. This placeholders will be replaced with dynamic data while rendering. The placeholders must not destroy the capability of the html file to be viewed statically. I choosed to use html comments, for example <!--t_number--> ",
            "selection": {
                "start": {
                    "line": 40,
                    "character": 17
                },
                "end": {
                    "line": 40,
                    "character": 45
                }
            }
        },
        {
            "file": "web_server_folder/templates/query/crev_query_template.html",
            "line": 48,
            "description": "## replace text  \nThe static text \"1\" for this text node is used for the graphic preview. \nTo replace it with dynamic data, we add before it a comment with the special syntax <!--t_name-->. ",
            "selection": {
                "start": {
                    "line": 48,
                    "character": 17
                },
                "end": {
                    "line": 48,
                    "character": 47
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 246,
            "description": "## text placeholder\nThe rendering finds the special comment. It calls `call_fn_string` and temporarily saves the result. \nIt does not push the placeholder comment to the html nodes, because is not needed in the result html.",
            "selection": {
                "start": {
                    "line": 243,
                    "character": 1
                },
                "end": {
                    "line": 246,
                    "character": 57
                }
            }
        },
        {
            "file": "src/all_summary_mod.rs",
            "line": 146,
            "description": "## dynamic data\nEvery placeholder has code that returns dynamic data as a string. This method is implemented on the data model, so it has access to all the data it needs.",
            "selection": {
                "start": {
                    "line": 142,
                    "character": 9
                },
                "end": {
                    "line": 146,
                    "character": 36
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 229,
            "description": "## next TextNode\nWhen the rendering goes to the next TextNode it does not use the static content. \nIt uses the dynamic content temporarily saved.",
            "selection": {
                "start": {
                    "line": 225,
                    "character": 1
                },
                "end": {
                    "line": 229,
                    "character": 63
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 237,
            "description": "## push to parent node\nThen this dynamic TextNode is pushed to the parent node.",
            "selection": {
                "start": {
                    "line": 234,
                    "character": 1
                },
                "end": {
                    "line": 237,
                    "character": 24
                }
            }
        },
        {
            "file": "web_server_folder/templates/query/crev_query_template.html",
            "line": 105,
            "description": "## boolean placeholder\nThe special comment <!--b_...--> can result in true or false. \nIt leaves or removes the next node completely.",
            "selection": {
                "start": {
                    "line": 104,
                    "character": 9
                },
                "end": {
                    "line": 104,
                    "character": 34
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 249,
            "description": "## boolean\nThe rendering finds the placeholder and calls the implementation method.\nIt saves temporarily the result.",
            "selection": {
                "start": {
                    "line": 247,
                    "character": 13
                },
                "end": {
                    "line": 249,
                    "character": 75
                }
            }
        },
        {
            "file": "src/html_template_mod.rs",
            "line": 183,
            "description": "## next node\nBefore rendering the next node we look at the temporary value retain_next_node.\nIf it is false, then we don't render the next node. Just jump over it.",
            "selection": {
                "start": {
                    "line": 182,
                    "character": 19
                },
                "end": {
                    "line": 183,
                    "character": 57
                }
            }
        },
        {
            "file": "src/proof_mod.rs",
            "line": 125,
            "description": "## boolean method\nThe implemented method returns true or false for the placeholder according to the data.",
            "selection": {
                "start": {
                    "line": 121,
                    "character": 8
                },
                "end": {
                    "line": 124,
                    "character": 53
                }
            }
        }
    ]
}