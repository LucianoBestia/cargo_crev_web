-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2020-01-07T19:29:15.084600697+01:00"
from:
  id-type: crev
  id: "-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits"
  url: "https://github.com/HeroicKatora/crev-proofs"
package:
  source: "https://crates.io"
  name: secret_integers
  version: 0.1.5
  revision: 9de08c2172862429c8ab0474c7858fa45fe92d8d
  digest: aZCHg3hk0FZuzQRaNa31pz4NSGbTBpWZtx4h86urDZg
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  The crate contains no comments on how the supposed constant time operations
  are actually achieved. There is no mention of a memory model, no discussion
  of references, black boxes, speculation, optimization, etc. And on top of
  these theoretical shortcomings the crate also contains no tests to verify any
  of their assumptions. This means: no `asm` output review, no smoke tests for
  operation's time dependencies and a general lack of even functional tests.
  
  The `classify` method is just a glorified constructor and even contains a
  generic which will in general have no guarantees and is totally misplaced
  here. And `declassify` doesn't really do anything since the whole type state
  can always be dereferenced into the underlying type if the compiler pleases
  (and, oh, it will).
  
  An unexplained fill-horn of converters is added. Since they do not perform
  any more robust sequencing or basic optimization barriers, one might as well
  use the `classify` constructor instead. They are even declared `#[inline]`!
  
  Some allocating to-bytes converters are offered. Despite plainly leaking all
  values into the global heap without any protection or zeroing after
  expiration, they have no documentation, unlike much less dangerous methods.
  
  Despite the fact that several operations are disallowed as a 'security
  feature', an inconsistent other set is allowed. Overflow checked operations
  will, almost by definition, at least contain conditional moves if compiled
  naively using the built-ins. But for some unexplained reason, the division
  operation of all is untrusted!
  
  Many other such ops -- with invalid and panicking inputs or similar -- exist:
  Rotations will probably do a branch on the input value, additions overflow
  check and complain etc. in debug code. Maybe the bitwise operations are not
  totally broken.
  
  WORST! Some operations are transliterated from WireGuard. But they contain
  TYPOS that plainly contradict newly introduced variable names. How do they
  even work? It is not explained.
  
  By the way, the code is copied from a GPL licensed project (WireGuard) but
  the crate itself advertises an MIT license. So this might also be a licensing
  risk for the future.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
iGKg1fRpwf_tUq_YZo2OFtDyJlpL0xcWDCHfGQ0t9vA3qYrtQQHeIToJdm3MsuvueApmzJIpyMen7WVz9Qx2CA
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2020-01-07T19:49:37.191874049+01:00"
from:
  id-type: crev
  id: "-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits"
  url: "https://github.com/HeroicKatora/crev-proofs"
package:
  source: "https://crates.io"
  name: secret_integers
  version: 0.1.5
  revision: 9de08c2172862429c8ab0474c7858fa45fe92d8d
  digest: aZCHg3hk0FZuzQRaNa31pz4NSGbTBpWZtx4h86urDZg
review:
  thoroughness: medium
  understanding: medium
  rating: negative
comment: |
  The crate contains no comments on how the supposed constant time operations
  are actually achieved. There is no mention of a memory model, no discussion
  of references, black boxes, speculation, optimization, etc. And on top of
  these theoretical shortcomings the crate also contains no tests to verify any
  of their assumptions. This means: no `asm` output review, no smoke tests for
  operation's time dependencies and a general lack of even functional tests.
  
  The `classify` method is just a glorified constructor and even contains a
  generic which will in general have no guarantees and is totally misplaced
  here. And `declassify` doesn't really do anything since the whole type state
  can always be dereferenced into the underlying type if the compiler pleases
  (and, oh, it will).
  
  An unexplained fill-horn of converters is added. Since they do not perform
  any more robust sequencing or basic optimization barriers, one might as well
  use the `classify` constructor instead. They are even declared `#[inline]`!
  
  Some allocating to-bytes converters are offered. Despite plainly leaking all
  values into the global heap without any protection or zeroing after
  expiration, they have no documentation, unlike much less dangerous methods.
  
  Despite the fact that several operations are disallowed as a 'security
  feature', an inconsistent other set is allowed. Overflow checked operations
  will, almost by definition, at least contain conditional moves if compiled
  naively using the built-ins. But for some unexplained reason, the division
  operation of all is untrusted!
  
  Many other such ops -- with invalid and panicking inputs or similar -- exist:
  Rotations will probably do a branch on the input value, additions overflow
  check and complain etc. in debug code. Maybe the bitwise operations are not
  totally broken.
  
  WORST! Some operations are transliterated from WireGuard. But they contain
  TYPOS that plainly contradict newly introduced variable names. How do they
  even work? It is not explained.
  
  By the way, the code is copied from a GPL licensed project (WireGuard) but
  the crate itself LOOKS like an MIT license but actually mentions APACHE
  within the text. So this might also be a licensing risk for the future.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
CmnNfF-yHuY1E3OKcs5ZCOSQKxlae2jLYSIM5RmU3GXV1OczQ7XINaonsVc6qEGoVkDo_YIo3hMcEOEn-fkUAg
-----END CREV PACKAGE REVIEW-----

-----BEGIN CREV PACKAGE REVIEW-----
version: -1
date: "2020-01-10T19:04:29.242771899+01:00"
from:
  id-type: crev
  id: "-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits"
  url: "https://github.com/HeroicKatora/crev-proofs"
package:
  source: "https://crates.io"
  name: bytemuck
  version: 1.1.0
  revision: 6d44eadbd2651a0704a8d66afee5d312b80795f2
  digest: kpdE5Qy2Z6lRR7zkQRzJLc6kBBSLiUdZzUo6ckRMQqo
review:
  thoroughness: medium
  understanding: high
  rating: positive
comment: |
  The implementation is rather conservative on many fronts and requires very
  strong, sometimes even unnecessary, preconditions for all operations. But
  this makes reasoning easier since you work with a consistent set of
  assumptions. This is in contrast to `zerocopy` which has at three differing
  sets.
  
  The biggest leap of unsafety is the assumption that slices strides and arrays
  agree with the size of their elements. This is not quite likely to change,
  ever, but it should be noted nevertheless. The exact wording of `Pod` also
  allows us to smuggle a type through its requirements. It takes some care to
  try and only allow types that might violate the assumption by requiring a
  defined `repr` but in its wording forgets that `repr(packed)` can be applied
  to `repr(rust)`. Thus, the following type conforms to the wording but not the
  spirit behind it.
  
  ```
  \#[repr(packed)] struct BadSize(u16, u8)
  ```
  
  The easiest fix would be to explicitly list the requirement that the size is
  divisible by the alignment. This defines the stride to agree with the size.
-----BEGIN CREV PACKAGE REVIEW SIGNATURE-----
s8dcLRrOCsdkgdvLjPQibcc3MUR6tiXNxaUheqYeT_v1bONOWTHESaV8hLSNYPv1QuB9bHa65IU-taYjjKdbBA
-----END CREV PACKAGE REVIEW-----

